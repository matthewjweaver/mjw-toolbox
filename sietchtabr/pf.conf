clown_wg_if="wg1"
clown_wg_port="22713"
clown_wg_net="192.168.221.0/24"
ext_if=em0
haven_if=em4
int_if=em5
nodeless4="{ \
  69.4.102.188, \
  155.138.220.216, \
  207.148.3.69 }"
sietchtabr6="{ \
  2603:b078:ffff:2ff4::/64, \
  2603:b078:419a::/48, \
  2603:b078:445d::/48, \
  2603:b078:4e9a:2::/64 \
}"
o_int="192.168.223.2/32"
promised_lan_vpn_if="enc2"
promised_lan_int_if="vlan42"
promised_lan_nets="{ \
  10.42.1.0/24, \
  10.42.2.0/24, \
  10.42.3.0/24, \
  10.42.4.0/24, \
  10.42.253.0/24, \
  10.42.254.0/24 \
}"
static_ported="{ \
  192.168.223.21,
  192.168.223.24
}"
umbu_int="192.168.223.22/32"
untrusted_if=vlan666
waps="{ \
  192.168.223.128, \
  192.168.223.129,
  192.168.223.130,
  192.168.223.131,
  192.168.233.132,
  192.168.223.133,
  192.168.223.134
 }"

########################################################################
# PF Settings
# Set conservative (high) limits. As of 5/2022, these are all between
# one and two orders of magnitude higher than steady state usage.
set limit { \
  states 100000, \
  src-nodes 100000, \
  tables 10000, \
  table-entries 500000 }
# Prefer to not timeout states, at an increased memory cost
set optimization conservative
# Begin to issue syncookies if the state table is 10% or more full, stop
# if the state table falls to 5% full or less.
set syncookies adaptive (start 10%, end 5%)
# Use the in-kernel ruleset to order an incoming ruleset load to
# optimize for early matching of quick rules (save CPU)
set ruleset-optimization profile
# Do not packet filter on loopback, encapsulated IPSEC, nor the GRE
# interface. GRE interface is static point to point, and wrapped with
# IPSEC, inheriting protection from rules limiting traffic between the
# GRE endpoints to only ESP.
set skip on { lo bridge0 enc0 gre0 }


########################################################################
# Table definitions
# Used for listing identified ssh scanners, in pf.sshbots, population of
# which is done outside pf.conf.
table <sshbots> counters persist file "/etc/pf.sshbots"


########################################################################
# Queue definitions (uplink, LAN)
queue fq on $em0 flows 2048 bandwidth 900M max 900M qlimit 2048 default
queue fq on $em5 flows 2048 bandwidth 900M max 900M qlimit 2048 default


########################################################################
# Uplink packet normalization
# normalize everything, avoid fragments, randomize outobund IDs, and
# de-fingerprint tcp timestamps
match in  on $em0 scrub (max-mss 1440 no-df reassemble tcp)
match out on $em0 scrub (random-id reassemble tcp)

########################################################################
# Global Blocking
# Zap any traffic to or from known ssh scanners, do not return any
# packets in response
block drop log quick from { <sshbots> } to any
# Failing another match, default to block a given packet, and do not
# return any packets in response
block drop log

########################################################################
# Autoconfiguration, IP4 and IP6
ip_autoconf_if = "{ em0 }"
ip6_autoconf_if = "{ em0, em5, vlan666 }"
# DHCP
pass out log quick on $ip_autoconf_if \
  from any port bootpc \
  to   any port bootps
pass in  log quick on $ip_autoconf_if \
  from any port bootps \
  to   any port bootpc
# SLAAC
pass log quick on $ip6_autoconf_if inet6 \
  proto icmp6 \
  from { fe80::/10, ff02::/10 } \
  to { fe80::/10, ff02::/10 } \
  icmp6-type { echoreq routersol routeradv neighbrsol neighbradv }
# DHCP6
pass out log quick on $ip6_autoconf_if inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-client \
  to { fe80::/10, ff02::/10 } port dhcpv6-server
pass in  log quick on $ip6_autoconf_if inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-server \
  to { fe80::/10, ff02::/10 } port dhcpv6-client


########################################################################
# Outbound DNS traffic, from our recursive resolver or admin user only
pass out log quick on em0 \
  inet proto { udp, tcp } \
  from (em0) \
  to any port { domain, domain-s } \
  user { "_unbound" }
pass out log quick on em0 \
  inet proto { udp, tcp } \
  from (em0) \
  to any port { domain, domain-s } \
  group { "wheel" }
pass out log quick on em0 \
  inet6 proto { udp, tcp } \
  from (em0) \
  to any port { domain, domain-s } \
  user { "_unbound" }
pass out log quick on em0 \
  inet6 proto { udp, tcp } \
  from (em0) \
  to any port { domain, domain-s } \
  group { "wheel" }


########################################################################
# Outbound administrative traffic (ssh, https, icmp, icmp6)
pass out log quick on em0 \
  inet proto tcp \
  from (em0) \
  to any port { https, ssh } \
  group { "wheel" }
pass out log quick on em0 \
  inet proto icmp \
  from (em0) \
  to any \
  group { "wheel" }
pass out log quick on em0 \
  inet6 proto tcp \
  from (em0) \
  to any port { https, ssh } \
  group { "wheel" }
pass out log quick on em0 \
  inet6 proto icmp6 \
  from (em0) \
  to any \
  group { "wheel" }


########################################################################
# Outbound NTP traffic from ntpd
pass out log quick on em0 \
  inet proto { tcp, udp } \
  from (em0) \
  to any port ntp \
  user { "_ntp" }
pass out log quick on em0 \
  inet6 proto { tcp, udp } \
  from (em0) \
  to any port ntp \
  user { "_ntp" }


########################################################################
# NFS traffic to filer, taqwa.here
pass out log quick on em5 \
  inet proto tcp \
  from (em5) \
  to 192.168.223.10 port { portmap, nfsd, <=1024 }


########################################################################
# Router-based services
# Externally available (https, ssh)
pass in  log quick on em0 \
  inet proto tcp \
  from any \
  to (em0) port { https, ssh }
pass in  log quick on em0 \
  inet6 proto tcp \
  from any \
  to (em0) port { https, ssh }
# Internally available (DNS, https, ntp, ssh)
pass in  log quick on em5 \
  inet proto { tcp, udp } \
  from any \
  to (em5) port { domain, domain-s, https, ntp, ssh }
pass in  log quick on em5 \
  inet6 proto { tcp, udp } \
  from any \
  to (em5) port { domain, domain-s, https, ntp, ssh }
# Internal DHCP service
pass in  log quick on em5 \
  inet proto udp \
  from any port bootpc \
  to any port bootps
pass out log quick on em5 \
  inet proto udp \
  from any port bootpc \
  to any port bootps


###XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX###
# match out on $
###XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX###
# match out on $
match out on $promised_lan_vpn_if \
  from $int_if:network to $promised_lan_nets \
  nat-to $promised_lan_int_if:0

# catch redirects early
match in on $ext_if \
  proto tcp from any to $ext_if:0 port 24625 \
  rdr-to $umbu_int port 32400
match in on $ext_if \
  proto { udp, tcp } from any to $ext_if:0 port 55555 \
  rdr-to $umbu_int

# default to block

# Zap all traffic from addresses that scan ssh

# vpn to clown
pass in  log quick on $ext_if proto esp from $nodeless4 to ($ext_if)
pass out log quick on $ext_if proto esp from ($ext_if) to $nodeless4
pass in  log quick on $ext_if proto udp from $nodeless4 to ($ext_if) \
  port { ipsec-nat-t, isakmp, $clown_wg_port } keep state
pass out log quick on $ext_if proto udp from ($ext_if) to $nodeless4 \
  port { ipsec-nat-t, isakmp, $clown_wg_port } keep state

anchor grahams

# vpn with promised lan, anchored out into secondary file because FQDNs
anchor promised_lan
pass log quick on { $promised_lan_vpn_if, $promised_lan_int_if }

# label rest of uplink traffic for stats
pass  in log quick on $ext_if from any to ($ext_if) label "$dstaddr-in" keep state
pass out log quick on $ext_if from ($ext_if) to any label "$srcaddr-out" keep state

# wireguard interface facing clown hosts
pass in  log on $clown_wg_if from $clown_wg_net to any keep state
pass out log on $clown_wg_if from any to $clown_wg_net keep state

## external interface
# inet6 autoconfiguration

# nat outbound
pass out log quick on $ext_if \
  from $static_ported nat-to ($ext_if) static-port keep state
pass out log quick on $ext_if \
  from { $haven_if:network, \
         $int_if:network, \
         $untrusted_if:network } \
  nat-to ($ext_if) keep state
pass out log quick on $ext_if inet \
  from ($ext_if) \
  keep state

# allow out ipv6 space to pass outbound
pass out log quick on $ext_if inet6 \
  from $sietchtabr6 to any \
  keep state

# exposed services
pass in log on $ext_if inet  proto tcp from any to ($ext_if) \
  port { https, ssh } keep state
pass in log on $ext_if inet6 proto tcp from any to ($ext_if) \
  port { https, ssh } keep state
pass in log quick on $ext_if  \
  proto tcp from any to $umbu_int port 32400 keep state
pass in log quick on $ext_if  \
  proto { udp, tcp } from any to $umbu_int port 55555 keep state

# allow out ipv6 space to pass inbound
pass in log quick on $ext_if inet6 \
  from any \
  to $sietchtabr6 \
  keep state

# TODO: rework
# DMZ services
pass in log on $ext_if inet proto icmp \
  from $nodeless4 to ($ext_if) \
  icmp-type 8 code 0 keep state
pass in log on $ext_if proto tcp \
  from $nodeless4 to ($ext_if) \
  port { domain, https, ipsec-nat-t, isakmp, www, 853, 4949 } keep state
pass in log on $ext_if proto udp \
  from $nodeless4 to ($ext_if) \
  port { domain, ipsec-nat-t, isakmp, ntp, tftp } keep state

## untrusted vlan (internet of things, etc)
pass in log quick on $untrusted_if inet proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to $untrusted_if keep state
pass in log quick on $untrusted_if inet6 proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to $untrusted_if keep state
pass in log quick on $untrusted_if proto { tcp, udp } \
  from $untrusted_if:network to any \
  port { daap, ssdp, 5350, 5351, mdns, 49152:65535 } keep state
pass out log quick on $untrusted_if proto { tcp, udp } \
  from any to $untrusted_if:network \
  port { daap, ssdp, 5350, 5351, mdns, 49152:65535 } keep state
pass in log quick on $untrusted_if proto tcp \
  from $untrusted_if:network to any \
  port { https, www } keep state
pass in log quick on $untrusted_if proto tcp \
  from any to $untrusted_if:network \
  port { https, www } keep state
pass log quick on $untrusted_if proto udp \
  from 224.0.0.0/24 to any
pass log quick on $untrusted_if proto udp \
  from any to 224.0.0.0/24

## haven-facing physical interface
pass in log on $haven_if proto tcp \
  from $haven_if:network to $haven_if:0 \
  port { domain, https, ssh, www, 4949 } keep state
pass in log on $haven_if proto udp \
  from $haven_if:network to $haven_if:0 \
  port { domain, ntp } keep state
pass in  log quick on $haven_if proto udp \
  from $haven_if:network to any \
  port { syslog } keep state
pass in  log on $haven_if proto udp from port 68 to port 67
pass out log on $haven_if proto udp from port 67 to port 68
pass in  log quick on $haven_if proto tcp \
  from $haven_if:network to any \
  port { http, https, ssh, syslog-tls } keep state
pass out log quick on $haven_if proto tcp \
  from { $haven_if:0, $int_if:network } to $haven_if:network \
  port { http, https, ssh, 4949 } keep state
pass out log quick on $haven_if inet proto icmp \
  from $haven_if:0 to $haven_if:network \
  icmp-type 8 code 0 keep state

## lan-facing physical interface
pass in log quick on $int_if inet proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to $int_if keep state
pass in log quick on $int_if proto tcp \
  from $int_if:network to $int_if:0 \
  port { https, ssh, www, 3000 } keep state
pass in log quick on $int_if proto udp \
  from $int_if:network to $int_if:0 \
  port { ntp, syslog, syslog-tls } keep state
pass in log quick on $int_if inet proto icmp \
  from $int_if:network to $int_if:0 \
  icmp-type 8 code 0 keep state
pass in  log quick on $int_if proto udp from port 68 to port 67
pass out log quick on $int_if proto udp from port 67 to port 68
pass in  log quick on $int_if inet from $int_if:network to any keep state
pass out log quick on $int_if from $int_if:0 to $int_if:network 
pass in  log quick on $int_if from 224.0.0.0/24 to any
pass out log quick on $int_if from any to 224.0.0.0/24
pass in  log on $int_if \
  proto tcp from any to $ext_if:0 port 24625 \
  rdr-to $umbu_int port 32400
pass out log quick on $int_if proto tcp to $umbu_int port 32400 \
  received-on $int_if nat-to $int_if
pass out log quick on $int_if inet from any to $int_if:network

## lan-facing physical interface, inet6
pass log quick on $int_if inet6 \
  proto icmp6 \
  from { fe80::/10, ff02::/10, $int_if:network } \
  to { fe80::/10, ff02::/10, $int_if:network } \
  icmp6-type { echoreq routersol routeradv neighbrsol neighbradv } \
  keep state
pass in log quick on $int_if inet6 proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to $int_if keep state
pass in  log quick on $int_if inet6 from $int_if:network to any keep state
pass out log quick on $int_if inet6 from any to $int_if:network

## untrusted-facing vlan
pass in log quick on $untrusted_if inet proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to $untrusted_if keep state
pass in log quick on $untrusted_if inet6 proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to $untrusted_if keep state
pass in log quick on $untrusted_if proto udp \
  from $untrusted_if:network to $untrusted_if:0 \
  port { ntp, syslog, syslog-tls } keep state
pass in log quick on $untrusted_if inet proto icmp \
  from $untrusted_if:network to $untrusted_if:0 \
  icmp-type 8 code 0 keep state
pass in  log quick on $untrusted_if proto udp from port 68 to port 67
pass out log quick on $untrusted_if proto udp from port 67 to port 68
pass in  log quick on $untrusted_if from $untrusted_if:network to ! $int_if:network keep state
pass out log quick on $untrusted_if from $untrusted_if:0 to $untrusted_if:network 
pass in  log quick on $untrusted_if from 224.0.0.0/24 to any
pass out log quick on $untrusted_if from any to 224.0.0.0/24
