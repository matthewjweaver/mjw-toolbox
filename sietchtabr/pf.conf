o_int="192.168.223.2/32"
umbu_int="192.168.223.22/32"
waps="{ 192.168.223.128-192.168.223.134 }"

########################################################################
# PF Settings
# Set conservative (high) limits. As of 5/2022, these are all between
# one and two orders of magnitude higher than steady state usage.
set limit { \
  states 100000, \
  src-nodes 100000, \
  tables 10000, \
  table-entries 500000 }
# Prefer to not timeout states, at an increased memory cost
set optimization conservative
# Begin to issue syncookies if the state table is 10% or more full, stop
# if the state table falls to 5% full or less.
set syncookies adaptive (start 10%, end 5%)
# Use the in-kernel ruleset to order an incoming ruleset load to
# optimize for early matching of quick rules (save CPU)
set ruleset-optimization profile
# Do not packet filter on loopback, encapsulated IPSEC, nor the GRE
# interface. GRE interface is static point to point, and wrapped with
# IPSEC, inheriting protection from rules limiting traffic between the
# GRE endpoints to only ESP.
set skip on { lo bridge0 enc0 gre0 }


########################################################################
# Table definitions
# Used for listing identified ssh scanners, in pf.sshbots, population of
# which is done outside pf.conf.
table <sshbots> counters persist file "/etc/pf.sshbots"


########################################################################
# Queue definitions (uplink, LANs)
queue fq on em0 flows 2048 bandwidth 900M max 900M qlimit 2048 default
queue fq on em4 flows 2048 bandwidth 900M max 900M qlimit 2048 default
queue fq on em5 flows 2048 bandwidth 900M max 900M qlimit 2048 default


########################################################################
# Uplink packet normalization
# normalize everything, avoid fragments, randomize outobund IDs, and
# de-fingerprint tcp timestamps
match in  on em0 scrub (max-mss 1440 no-df reassemble tcp)
match out on em0 scrub (random-id reassemble tcp)


########################################################################
# Global Blocking
# Zap any traffic to or from known ssh scanners, do not return any
# packets in response
block drop log quick from { <sshbots> } to any

# Failing another match, default to block a given packet, and do not
# return any packets in response
block drop log


########################################################################
# Labelling (for statistics)
match  in on em0 from any to (em0) label "$dstaddr-in" keep state
match out on em0 from (em0) to any label "$srcaddr-out" keep state


########################################################################
# Autoconfiguration, IP4 and IP6
ip_autoconf_if = "{ em0 }"
ip6_autoconf_if = "{ em0, em5, vlan666 }"

# DHCP
pass out log quick on $ip_autoconf_if \
  from any port bootpc \
  to   any port bootps
pass in  log quick on $ip_autoconf_if \
  from any port bootps \
  to   any port bootpc

# SLAAC
pass log quick on $ip6_autoconf_if inet6 \
  proto icmp6 \
  from { fe80::/10, ff02::/10 } \
  to { fe80::/10, ff02::/10 } \
  icmp6-type { echoreq routersol routeradv neighbrsol neighbradv }

# DHCP6
pass out log quick on $ip6_autoconf_if inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-client \
  to { fe80::/10, ff02::/10 } port dhcpv6-server
pass in  log quick on $ip6_autoconf_if inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-server \
  to { fe80::/10, ff02::/10 } port dhcpv6-client


########################################################################
# Outbound DNS traffic, from our recursive resolver or admin user only
pass out log quick on em0 inet \
  proto { udp, tcp } \
  from (em0) \
  to any port { domain, domain-s } \
  user { "_unbound" }
pass out log quick on em0 inet \
  proto { udp, tcp } \
  from (em0) \
  to any port { domain, domain-s } \
  group { "wheel" }
pass out log quick on em0 inet6 \
  proto { udp, tcp } \
  from (em0) \
  to any port { domain, domain-s } \
  user { "_unbound" }
pass out log quick on em0 inet6 \
  proto { udp, tcp } \
  from (em0) \
  to any port { domain, domain-s } \
  group { "wheel" }


########################################################################
# Outbound administrative traffic (ssh, https, icmp, icmp6)
pass out log quick on em0 inet \
  proto tcp \
  from (em0) \
  to any port { https, ssh } \
  group { "wheel" }
pass out log quick on em0 inet \
  proto icmp \
  from (em0) \
  to any \
  group { "wheel" }
pass out log quick on em0 inet6 \
  proto tcp \
  from (em0) \
  to any port { https, ssh } \
  group { "wheel" }
pass out log quick on em0 inet6 \
  proto icmp6 \
  from (em0) \
  to any \
  group { "wheel" }


########################################################################
# Outbound NTP traffic from ntpd
pass out log quick on em0 inet \
  proto { tcp, udp } \
  from (em0) \
  to any port ntp \
  user { "_ntp" }
pass out log quick on em0 inet6 \
  proto { tcp, udp } \
  from (em0) \
  to any port ntp \
  user { "_ntp" }


########################################################################
# NFS traffic to filer, taqwa.here
pass out log quick on em5 inet \
  proto tcp \
  from (em5) \
  to 192.168.223.10 port { portmap, nfsd, <=1024 }


########################################################################
# Router-based services
# Externally available (https, ssh)
pass in  log quick on em0 inet \
  proto tcp \
  from any \
  to (em0) port { https, ssh }
pass in  log quick on em0 inet6 \
  proto tcp \
  from any \
  to (em0) port { https, ssh }

# Internally available (icmp pings, DNS, https, ntp, ssh, syslog)
pass in  log quick on em5 inet \
  proto icmp \
  from em5:network to em5 \
  icmp-type 8 code 0
pass in  log quick on em5 inet6 \
  proto icmp \
  from (em5:network) to (em5) \
  icmp6-type echoreq
pass in  log quick on em5 inet \
  proto { tcp, udp } \
  from em5:network \
  to em5 port { domain, domain-s, https, ntp, ssh, syslog, syslog-tls }
pass in  log quick on em5 inet6 \
  proto { tcp, udp } \
  from (em5:network) \
  to (em5) port { domain, domain-s, https, ntp, ssh, syslog, syslog-tls }

# Internal DHCP service
pass in  log quick on em5 inet \
  proto udp \
  from any port bootpc \
  to any port bootps
pass out log quick on em5 inet \
  proto udp \
  from any port bootps \
  to any port bootpc


########################################################################
# VPN rules, /etc/pf.conf.vpns
anchor vpns

########################################################################
# LAN rules, /etc/pf.conf.lans
anchor lans

########################################################################
# LAN-based externally available endpoint rules,
# /etc/pf.conf.lan-based-services
anchor lan-based-services

###XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX###
# catch redirects early
match in on em0 \
  proto tcp from any to em0:0 port 24625 \
  rdr-to $umbu_int port 32400
match in on em0 \
  proto { udp, tcp } from any to em0:0 port 55555 \
  rdr-to $umbu_int



# nat outbound
pass out log quick on em0 inet \
  from { em4:network, \
         vlan666:network } \
  nat-to (em0) keep state

# exposed lan services
pass in log quick on em0  \
  proto tcp from any to $umbu_int port 32400 keep state
pass in log quick on em0  \
  proto { udp, tcp } from any to $umbu_int port 55555 keep state

## untrusted vlan (internet of things, etc)
pass in log quick on vlan666 inet proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to vlan666 keep state
pass in log quick on vlan666 inet6 proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to vlan666 keep state
pass in log quick on vlan666 proto { tcp, udp } \
  from vlan666:network to any \
  port { daap, ssdp, 5350, 5351, mdns, 49152:65535 } keep state
pass out log quick on vlan666 proto { tcp, udp } \
  from any to vlan666:network \
  port { daap, ssdp, 5350, 5351, mdns, 49152:65535 } keep state
pass in log quick on vlan666 proto tcp \
  from vlan666:network to any \
  port { https, www } keep state
pass in log quick on vlan666 proto tcp \
  from any to vlan666:network \
  port { https, www } keep state
pass log quick on vlan666 proto udp \
  from 224.0.0.0/24 to any
pass log quick on vlan666 proto udp \
  from any to 224.0.0.0/24

## haven-facing physical interface
pass in log on em4 proto tcp \
  from em4:network to em4:0 \
  port { domain, https, ssh, www, 4949 } keep state
pass in log on em4 proto udp \
  from em4:network to em4:0 \
  port { domain, ntp } keep state
pass in  log quick on em4 proto udp \
  from em4:network to any \
  port { syslog } keep state
pass in  log on em4 proto udp from port 68 to port 67
pass out log on em4 proto udp from port 67 to port 68
pass in  log quick on em4 proto tcp \
  from em4:network to any \
  port { http, https, ssh, syslog-tls } keep state
pass out log quick on em4 proto tcp \
  from { em4:0, em5:network } to em4:network \
  port { http, https, ssh, 4949 } keep state
pass out log quick on em4 inet proto icmp \
  from em4:0 to em4:network \
  icmp-type 8 code 0 keep state

## untrusted-facing vlan
pass in log quick on vlan666 inet proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to vlan666 keep state
pass in log quick on vlan666 inet6 proto { tcp, udp } \
  from any to any \
  port { domain, domain-s } rdr-to vlan666 keep state
pass in log quick on vlan666 proto udp \
  from vlan666:network to vlan666:0 \
  port { ntp, syslog, syslog-tls } keep state
pass in log quick on vlan666 inet proto icmp \
  from vlan666:network to vlan666:0 \
  icmp-type 8 code 0 keep state
pass in  log quick on vlan666 proto udp from port 68 to port 67
pass out log quick on vlan666 proto udp from port 67 to port 68
pass in  log quick on vlan666 from vlan666:network to ! em5:network keep state
pass out log quick on vlan666 from vlan666:0 to vlan666:network 
pass in  log quick on vlan666 from 224.0.0.0/24 to any
pass out log quick on vlan666 from any to 224.0.0.0/24
