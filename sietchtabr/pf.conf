o_int="192.168.223.2/32"
umbu_int="192.168.223.22/32"
waps="{ 192.168.223.128-192.168.223.134 }"

########################################################################
# PF Settings
# Set conservative (high) limits. As of 5/2022, these are all between
# one and two orders of magnitude higher than steady state usage.
set limit { \
  states 100000, \
  src-nodes 100000, \
  tables 10000, \
  table-entries 500000 }
# Prefer to not timeout states, at an increased memory cost
set optimization conservative
# Begin to issue syncookies if the state table is 10% or more full, stop
# if the state table falls to 5% full or less.
set syncookies adaptive (start 10%, end 5%)
# Use the in-kernel ruleset to order an incoming ruleset load to
# optimize for early matching of quick rules (save CPU)
set ruleset-optimization profile
# Do not packet filter on loopback, encapsulated IPSEC, nor the GRE
# interface. GRE interface is static point to point, and wrapped with
# IPSEC, inheriting protection from rules limiting traffic between the
# GRE endpoints to only ESP.
set skip on { lo }
# Always create pflow data
set state-defaults pflow


########################################################################
# Table definitions
# Used for listing identified ssh scanners, in pf.sshbots, population of
# which is done outside pf.conf.
table <sshbots> counters persist file "/etc/pf.sshbots"
# these tables maintained by dhcpd(8), see also pf.conf.lans and
# bootstrap.sh.
table <dhcpd_abandoned> counters persist
table <dhcpd_leased> counters persist


########################################################################
# Queue definitions (uplink, LANs)
queue fq on em0 flows 8192 bandwidth 900M max 900M qlimit 8192 default
queue fq on vether0 flows 8192 bandwidth 900M max 900M qlimit 8192 default
queue fq on em1 flows 8192 bandwidth 950M max 950M qlimit 8192 default
# 10G -- anything larger than 4G -- overflows a kernel variable
#queue fq on ixl0 flows 32767 bandwidth 10G max 10G qlimit 32767 default

########################################################################
# Uplink packet normalization
# normalize everything, avoid fragments, randomize outobund IDs, and
# de-fingerprint tcp timestamps
match in  on vether0 scrub (max-mss 1440 no-df reassemble tcp)
match out on vether0 scrub (random-id reassemble tcp)


########################################################################
# LAN-based externally available endpoint rules,
# /etc/pf.conf.lan-based-services
anchor lan-based-services

########################################################################
# Global Blocking
# Zap any traffic to or from known ssh scanners, do not return any
# packets in response
block drop log quick from { <sshbots> } to any

# Failing another match, default to block a given packet, and do not
# return any packets in response
block drop log

########################################################################
# Interface skipping
# We want to effective skip filtering on these interfaces, but do so
# with pass rules so state is created for pflow/netflow purposes.
pass quick log on { bridge0 bridge42 em1 tap0 tap1 tap2 tap3 }

########################################################################
# Autoconfiguration, IP4 and IP6
ip_autoconf_if = "{ vether0 }"
ip6_autoconf_if = "{ vether0, ixl0, vlan666 }"

# DHCP
pass out log quick on $ip_autoconf_if inet \
  proto udp \
  from any port { bootpc, bootps } \
  to   any port { bootpc, bootps }
pass in  log quick on $ip_autoconf_if inet \
  proto udp \
  from any port bootps \
  to   any port bootpc

# SLAAC
pass log quick on $ip6_autoconf_if inet6 \
  proto icmp6 \
  from { fe80::/10, ff02::/10 } \
  to { fe80::/10, ff02::/10 } \
  icmp6-type { echoreq routersol routeradv neighbrsol neighbradv }

# DHCP6
pass out log quick on $ip6_autoconf_if inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-client \
  to { fe80::/10, ff02::/10 } port dhcpv6-server
pass in  log quick on $ip6_autoconf_if inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-server \
  to { fe80::/10, ff02::/10 } port dhcpv6-client


########################################################################
# Outbound DNS traffic, from our recursive resolver or admin user only
pass out log quick on vether0 inet \
  proto { udp, tcp } \
  from (vether0) \
  to any port { domain, domain-s } \
  user { "_unbound" }
pass out log quick on vether0 inet \
  proto { udp, tcp } \
  from (vether0) \
  to any port { domain, domain-s } \
  user { "sysop", "root" }
pass out log quick on vether0 inet6 \
  proto { udp, tcp } \
  from (vether0) \
  to any port { domain, domain-s } \
  user { "_unbound" }
pass out log quick on vether0 inet6 \
  proto { udp, tcp } \
  from (vether0) \
  to any port { domain, domain-s } \
  user { "sysop", "root" }


########################################################################
# Outbound administrative traffic (icmp, icmp6, https, ssh, whois)
pass out log quick on vether0 inet \
  proto tcp \
  from (vether0) \
  to any port { http, https } \
  user { "_file", "_ntp", "_pfetch", "_pkgfetch", "_syspatch" }
pass out log quick on vether0 inet \
  proto tcp \
  from (vether0) \
  to any port { ftp, http, https, rsync, ssh, whois } \
  user { "sysop", "root" }
pass out log quick on vether0 inet \
  proto icmp \
  from (vether0) \
  to any \
  icmp-type echoreq code 0
pass out log quick on vether0 inet6 \
  proto tcp \
  from (vether0) \
  to any port { http, https } \
  user { "_file", "_ntp", "_pkgfetch", "_syspatch" }
pass out log quick on vether0 inet6 \
  proto tcp \
  from (vether0) \
  to any port { http, https, rsync, ssh, whois } \
  user { "sysop", "root" }
pass out log quick on vether0 inet6 \
  proto icmp6 \
  from (vether0) \
  to any \
  icmp6-type echoreq


########################################################################
# Outbound NTP traffic from ntpd, including that for checking
# constraints
pass out log quick on vether0 inet \
  proto { tcp, udp } \
  from (vether0) \
  to any port ntp \
  user { "_ntp" }
pass out log quick on vether0 inet6 \
  proto { tcp, udp } \
  from (vether0) \
  to any port ntp \
  user { "_ntp" }
pass out log quick on vether0 inet \
  proto tcp \
  from (vether0) \
  to any port https \
  user { "_ntp" }
pass out log quick on vether0 inet6 \
  proto tcp \
  from (vether0) \
  to any port https \
  user { "_ntp" }


########################################################################
# Router-based services
# Externally available ( http, https, ssh)
# http required for acme certificate renewals (boooooo)
pass in  log quick on vether0 inet \
  proto tcp \
  from any \
  to (vether0) port { http, https, ssh }
pass in  log quick on vether0 inet6 \
  proto tcp \
  from any \
  to (vether0) port { http, https, ssh }

# Internally available (icmp pings, DNS, https, ntp, ssh, syslog)
pass in  log quick on ixl0 inet \
  proto icmp \
  from ixl0:network to { ixl0, (vether0) } \
  icmp-type echoreq code 0
pass in  log quick on ixl0 inet6 \
  proto icmp6 \
  from (ixl0:network) to { (ixl0), vether0 } \
  icmp6-type echoreq
pass in  log quick on ixl0 inet \
  proto { tcp, udp } \
  from ixl0:network \
  to { ixl0, (vether0) }  port { domain, domain-s, https, ntp, ssh, syslog, syslog-tls, tftp }
pass in  log quick on ixl0 inet6 \
  proto { tcp, udp } \
  from (ixl0:network) \
  to { (ixl0), (vether0) } port { domain, domain-s, https, ntp, ssh, syslog, syslog-tls, tftp }
# Available to local TPL segment
pass in  log quick on vlan42 inet \
  proto { tcp, udp } \
  from vlan42:network \
  to (vlan42)  port { domain, domain-s, https, ntp, ssh, syslog, syslog-tls }
# Available to local internet of shit network
pass in  log quick on vlan666 inet \
  proto { tcp, udp } \
  from vlan666:network \
  to (vlan666)  port { domain, domain-s, https, ntp, syslog, syslog-tls }


# Internal DHCP service (LAN, OOB)
pass in  log quick on { ixl0, vlan42 } inet \
  proto udp \
  from any port bootpc \
  to any port bootps
pass out log quick on { ixl0, vlan42 } inet \
  proto udp \
  from any port bootps \
  to any port bootpc

########################################################################
# VPN rules, /etc/pf.conf.vpns
anchor vpns

########################################################################
# LAN rules, /etc/pf.conf.lans
anchor lans

