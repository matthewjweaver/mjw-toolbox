sietchtabr="69.4.102.188/32"
sietchtabr6="2603:b078:ffff::/64"
uplink="em0"
downlink="em1"

set skip on { lo bridge0 }
set block-policy drop
set limit { \
  states 100000, \
  src-nodes 100000, \
  tables 10000, \
  table-entries 500000 }
set reassemble yes
set ruleset-optimization profile

# default to block and log
block log

# tables used to filter bad actors
table <sshbots> counters persist file "/etc/pf.sshbots"

# fair queueing, upstream
upstream="800M"
queue fq on $uplink flows 2048 bandwidth $upstream max $upstream qlimit 2048 default
# fair queueing, downstream
downstream="900M"
queue fq on $downlink flows 2048 bandwidth $downstream max $downstream qlimit 2048 default

# normalize everything, avoid fragments, de-fingerprint tcp
match in on $uplink scrub (max-mss 1440 no-df reassemble tcp)

# randomize outbound ids, de-fingerprint tcp
match out on $uplink scrub (random-id reassemble tcp)

# Zap all traffic from addresses that scan ssh
block drop log quick from { <sshbots> } to any

# uplink
pass in  quick on $uplink proto tcp \
  from any port 22 to $sietchtabr \
  label "$if-22-in" no state
pass out quick on $uplink proto tcp \
  from $sietchtabr to any port 22 \
  label "$if-22-out" no state

pass in  quick on $uplink proto udp \
  from any port 53 to $sietchtabr \
  label "$if-53-in" no state
pass out quick on $uplink proto udp \
  from $sietchtabr to any port 53 \
  label "$if-53-out" no state

pass in  quick on $uplink proto tcp \
  from any port 80 to $sietchtabr \
  label "$if-80-in" no state
pass out quick on $uplink proto tcp \
  from $sietchtabr to any port 80 \
  label "$if-80-out" no state

pass in  quick on $uplink proto tcp \
  from any port 443 to $sietchtabr \
  label "$if-443-in" no state
pass out quick on $uplink proto tcp \
  from $sietchtabr to any port 443 \
  label "$if-443-out" no state

pass in  quick on $uplink proto tcp \
  from any port 853 to $sietchtabr \
  label "$if-853-in" no state
pass out quick on $uplink proto tcp \
  from $sietchtabr to any port 853 \
  label "$if-853-out" no state

pass in  quick on $uplink from any to $sietchtabr label "$if-other-in" no state
pass out quick on $uplink from $sietchtabr to any label "$if-other-out" no state

# let dhcp work
pass in  log quick on $uplink \
  proto udp \
  from port { 67, 68 } \
  to port { 67, 68 } \
  no state
pass out log quick on $uplink \
  proto udp \
  from port { 67, 68 } \
  to port { 67, 68 } \
  no state

# inet6
pass in  quick on $uplink from any to $sietchtabr6 no state
pass out quick on $uplink from $sietchtabr6 to any no state

# inet6 autoconf (slaac, ndp, ra)
pass log quick on $uplink inet6 \
  proto icmp6 \
  from { fe80::/10, ff02::/10 } \
  to { fe80::/10, ff02::/10 } \
  icmp6-type { echoreq routersol routeradv neighbrsol neighbradv } \
  keep state

# DHCP6
pass in  log quick on $uplink inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-server to \
  { fe80::/10, ff02::/10 } port dhcpv6-client \
  keep state
pass out log quick on $uplink inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-client to \
  { fe80::/10, ff02::/10 } port dhcpv6-server \
  keep state

# downlink
pass in  quick on $downlink from $sietchtabr to any keep state
pass out quick on $downlink from any to $sietchtabr keep state

# dhcp
pass in  log quick on $downlink \
  proto udp \
  from port { 67, 68 } \
  to port { 67, 68 } \
  keep state
pass out log quick on $downlink \
  proto udp \
  from port { 67, 68 } \
  to port { 67, 68 } \
  keep state

# inet6
pass in  quick on $downlink from $sietchtabr6 to any keep state
pass out quick on $downlink from any to $sietchtabr6 keep state

# inet6 autoconf (slaac, ndp, ra)
pass log quick on $downlink inet6 \
  proto icmp6 \
  from { fe80::/10, ff02::/10 } \
  to { fe80::/10, ff02::/10 } \
  icmp6-type { echoreq routersol routeradv neighbrsol neighbradv } \
  keep state

# DHCP6
pass out log quick on $downlink inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-server to \
  { fe80::/10, ff02::/10 } port dhcpv6-client \
  keep state
pass in  log quick on $downlink inet6 \
  proto udp \
  from { fe80::/10, ff02::/10 } port dhcpv6-client to \
  { fe80::/10, ff02::/10 } port dhcpv6-server \
  keep state

# admin interface
pass out log quick on egress from (egress) to any keep state
pass in  log quick on egress proto tcp from any to (egress) \
  port { http, https, ssh }
pass in  log quick on egress proto tcp from 192.168.222.1 to (egress) \
  port 4949 keep state
pass in  log quick on egress inet proto icmp \
  from egress:network to egress \
  icmp-type 8 code 0 keep state
